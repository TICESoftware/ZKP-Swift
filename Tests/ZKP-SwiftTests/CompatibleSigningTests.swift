import CryptoKit
import Digest
import SwiftECC
import XCTest
@testable import ZKP_Swift

final class CompatibleSigningTests: XCTestCase {
    func testKotlinSignature() throws {
        let issuerPublicKey = try ECPublicKey(pem: publicKeyPEM)
        
        let payloadData = Data("Some raw string".utf8)
        let payloadDigest = Bytes(SHA256.hash(data: payloadData))
        
        // The signature was generated by kotlin
        let signatureBase64URLEncoded = "v2eKEsw0rlxHIY1uUzXWkVB-WSnhcMTujqZmDeRAkURZqkWnUM4D1ixhzYn1pA7OSiP3FBxNIlv7I5TU0fce0g"
        let signatureData = Data(base64URLEncoded: signatureBase64URLEncoded)!
        let bytes = Bytes(signatureData)
        let r = Bytes(bytes[0 ..< bytes.count / 2])
        let s = Bytes(bytes[bytes.count / 2 ..< bytes.count])
        let domain = issuerPublicKey.domain
        let signature = ECSignature(domain: domain, r: r, s: s)
        
        XCTAssertTrue(issuerPublicKey.verify(signature: signature, msg: payloadDigest, bw: nil))
    }
    
    func testGenerateKey() throws {
        let domain = Domain.instance(curve: .EC256r1)
        let (pub, pri) = domain.makeKeyPair()
        print(pub.pem)
        print(pri.pemPkcs8)
    }
}
